name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true

defaults:
  run:
    shell: bash

jobs:
  release:
    name: Build and release
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache deno
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/.cache
          key: deno-${{ github.sha }}
          restore-keys: |
            deno-
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: chmod +r ~/.docker/config.json

      - name: Start buildkitd
        run: |
          BUILDKITD_CONTAINER_ID=$(./cli.sh start_buildkitd -d)

          for i in {1..10}; do
            if docker logs "${BUILDKITD_CONTAINER_ID}" 2>&1 | grep "running server on"; then
              exit 0
            fi
            sleep 0.5
          done
          
          echo "Timed out waiting for buildkitd container to be ready. Logs:"
          docker logs "${BUILDKITD_CONTAINER_ID}"
          exit 1

      - name: Build
        env:
          SHELL_IMAGE: ghcr.io/shopstic/helmet-mods-ci:${{ hashFiles('shell/*') }}
          DENO_DIR: ${{ github.workspace }}/.cache/deno
          GIT_REF: ${{ github.event.inputs.version }}
        run: |-
          if ls "${DENO_DIR}" > /dev/null 2>&1; then
            du -sh "${DENO_DIR}"
          fi

          git config --global user.email "ci-runner@shopstic.com"
          git config --global user.name "CI Runner"
          git fetch origin release
          git checkout release
          git merge origin/main

          cat <<EOF | docker run \
            --workdir /repo \
            -i \
            --rm \
            --net=host \
            --init \
            -e "GIT_REF=${GIT_REF}" \
            -v "${GITHUB_WORKSPACE}:/repo" \
            -v "${HOME}/.docker/config.json:/root/.docker/config.json:ro" \
            -v "${DENO_DIR}:/root/.cache/deno" \
            -e "DENO_DIR=/root/.cache/deno" \
            "${SHELL_IMAGE}" \
            bash -l
          set -euo pipefail

          ./cli.sh code_quality
          ./cli.sh test
          ./cli.sh build_apps --output registry

          EOF

          git add ./src/apps/*/meta.ts
          git commit -m "Release ${GIT_REF}"
          git tag "${GIT_REF}"
          git push origin release --tags