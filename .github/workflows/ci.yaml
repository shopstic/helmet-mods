name: CI Workflow

on:
  push:
    branches-ignore:
      - release
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  build-env:
    name: Build CI environment image
    runs-on: ubuntu-20.04
    outputs:
      image: ${{ steps.buildkit.outputs.image }}:${{ steps.buildkit.outputs.tag }}    
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - run: chmod +r ~/.docker/config.json

      - name: Build and push shell Docker image
        id: buildkit
        uses: shopstic/buildkit-action@1.0.10
        with:
          context: ${{ github.workspace }}/shell
          image: ghcr.io/shopstic/helmet-mods-ci
          tag: ${{ hashFiles('shell/*') }}
          skipIfExists: true

  build-apps:
    name: Build apps
    needs: build-env
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Github ref name
        id: ref_name
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/heads/.* ]]; then
            echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
          fi

          if [[ "${GITHUB_REF}" =~ ^refs/tags/.* ]]; then
            echo "::set-output name=tag::${GITHUB_REF#refs/tags/}"
          fi

      - name: Cache deno
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/.cache
          key: deno-${{ github.sha }}
          restore-keys: |
            deno-
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        if: steps.ref_name.outputs.branch == 'main'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - run: chmod +r ~/.docker/config.json
        if: steps.ref_name.outputs.branch == 'main'

      - name: Start buildkitd
        run: |
          BUILDKITD_CONTAINER_ID=$(./cli.sh start_buildkitd -d)

          for i in {1..10}; do
            if docker logs "${BUILDKITD_CONTAINER_ID}" 2>&1 | grep "running server on"; then
              exit 0
            fi
            sleep 0.5
          done
          
          echo "Timed out waiting for buildkitd container to be ready. Logs:"
          docker logs "${BUILDKITD_CONTAINER_ID}"
          exit 1

      - name: Build
        env:
          SHELL_IMAGE: ${{ needs.build-env.outputs.image }}
          DENO_DIR: ${{ github.workspace }}/.cache/deno
          GITHUB_BRANCH: ${{ steps.ref_name.outputs.branch }}
          GITHUB_TAG: ${{ steps.ref_name.outputs.tag }}
        run: |-
          if ls "${DENO_DIR}" > /dev/null 2>&1; then
            du -sh "${DENO_DIR}"
          fi

          GIT_REF=${GITHUB_TAG:-"latest"}

          if [[ "${GIT_REF}" != "latest" ]]; then
            git fetch origin release
            git checkout release
            git merge origin/"${GITHUB_BRANCH}"
          fi

          cat <<EOF | docker run \
            --workdir /repo \
            -i \
            --rm \
            --net=host \
            --init \
            -e "GIT_REF=${GIT_REF}" \
            -v "${GITHUB_WORKSPACE}:/repo" \
            -v "${DENO_DIR}:/root/.cache/deno" \
            -e "DENO_DIR=/root/.cache/deno" \
            "${SHELL_IMAGE}" \
            bash -l
          set -euo pipefail

          ./cli.sh code_quality
          ./cli.sh test

          if [[ "\${GIT_REF}" == "latest" ]]; then
            ./cli.sh build_apps --output dev_null
          else
            ./cli.sh build_apps --output registry
          fi

          EOF

          if [[ "${GIT_REF}" != "latest" ]]; then
            git config --global user.email "ci-runner@shopstic.com"
            git config --global user.name "CI Runner"
            git add -A
            git commit -m "Release ${GIT_REF}"
            git push origin release
          fi