name: Build
description: Build
inputs:
  imageRepo:
    description: "Root image repository"
    required: true
  arch:
    description: "Nix arch"
    required: true
outputs:
  digests:
    description: Digests
    value: ${{ steps.push.outputs.digests }}
runs:
  using: composite
  steps:
    - name: Build
      shell: bash
      run: |-
        nix build -L -v '.#defaultPackage.${{ inputs.arch }}-linux'
        
    - name: Login to Amazon ECR
      uses: ./.github/actions/login-to-public-ecr
      with:
        imageRepo: ${{ inputs.imageRepo }}

    - name: Push
      shell: nix develop -v -c bash {0}
      id: push
      env:
        IMAGE_REPOSITORY: ${{ inputs.imageRepo }}
        GITHUB_SHA: ${{ github.sha }}
        NIX_ARCH: ${{ inputs.arch }}
      run: |-
        IMAGE_ARCH="amd64"
        if [[ "${NIX_ARCH}" == "aarch64" ]]; then
          IMAGE_ARCH="arm64"
        fi

        IMAGE_TAG="dev-${IMAGE_ARCH}-${GITHUB_SHA}"

        declare iac_version_bumper_digest registry_authenticator_digest registry_syncer_digest fdb_server_digest fdb_configurator_digest

        iac_version_bumper_digest=$(./release.sh push_image "${IMAGE_REPOSITORY}" iac-version-bumper "${IMAGE_TAG}") || exit $?
        registry_authenticator_digest=$(./release.sh push_image "${IMAGE_REPOSITORY}" registry-authenticator "${IMAGE_TAG}") || exit $?
        registry_syncer_digest=$(./release.sh push_image "${IMAGE_REPOSITORY}" registry-syncer "${IMAGE_TAG}") || exit $?
        fdb_server_digest=$(./release.sh push_image "${IMAGE_REPOSITORY}" fdb-server "${IMAGE_TAG}") || exit $?
        fdb_configurator_digest=$(./release.sh push_image "${IMAGE_REPOSITORY}" fdb-configurator "${IMAGE_TAG}") || exit $?

        output='{"iac_version_bumper":"'${iac_version_bumper_digest}'","registry_authenticator":"'${registry_authenticator_digest}'","registry_syncer":"'${registry_syncer_digest}'","fdb_server":"'${fdb_server_digest}'","fdb_configurator":"'${fdb_configurator_digest}'"}'

        echo ::set-output name=digests::"${output}"
